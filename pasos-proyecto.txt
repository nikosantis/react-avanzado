crear /src
index.js

npm init -y

npm i webpack wepack-cli --save-dev

crear el /dist
./node_modules/.bin/webpack src/index.js

node dist/main.js

Instalaremos html-webpack-plugin con:
npm i html-webpack-plugin --save-dev

crear el archivo webpack.config.js
configurarlo y importar HtmlWebpackPlugin

crear script en package.json "build" con "webpack"

npm run build

instalar el servidor de desarrollo de webpack

npm i webpack-dev-server --save-dev

añadir en package.json "dev": "webpack-dev-server"

REACT

Installar react y react-dom

npm i react react-dom

configurar index.js

crear index.html en /src

configurar webpack con template: 'src'

instalar babel para sintaxis jsx

npm i @babel/core @babel/preset-env babel-loader @babel/preset-react --save-dev

configurar webpack module rules con babel

instalar dependencia de babel react

npm install @babel/preset-react --save-dev

configurar webpack options con @babel/preset-react

npm run dev

2.-

Usando Linter

Primero instalamos "standart"

npm i standard --save-dev

luego creamos el script de standard package

""lint"": ""standard""

ejecutamos npm run standard

luego agregamos directorio a ignore de standard

""standard"": [
	""ignore"": [
		""/api/**""
	]
]

ahí podremos ordenar nuestros archivos.

luego debemos agregar una configuración de eslint para que no tengamos que cargar el script a cada momento.

""eslintConfig"": {
	""extends"": [
		""./node_modules/standard/eslintrc.json""
	]
}

now es una plataforma que hace deploy de manera sencilla

deploy con
now

isntalar styled components

npm install styled-components

usar styled-components

usar GlobalStyle con styled-components

para íconos instalar

npm install react-icons

crear logo rápido
maketext.io

convertir svg a text
https://jakearchibald.github.io/svgomg/

svg a component
https://www.smooth-code.com/open-source/svgr/playground/


instalar polyfill de Intersection Observer

npm install intersection-observer

luego instalar

npm i @babel/plugin-syntax-dynamic-import -D
npm i babel-eslint -D

graphql
no reemplaza a Api REST
apollo es el cliente que maneja graphql con react

npm install apollo-boost react-apollo graphql

para usar router
reach router

npm install @reach/router

se debe cambiar la configuración del dev

"dev": "webpack-dev-server --history-api-fallback",

luego se debe cambiar una configuración de webpack para que encuentra bundle.js

output: {
    filename: 'app.bundle.js',
    publicPath: '/'
  },

